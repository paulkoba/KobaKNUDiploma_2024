#include "clang/AST/AST.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/ASTMatchers/ASTMatchers.h"
#include <optional>

namespace cr_autogen {

std::optional<clang::ast_matchers::internal::Matcher<AccessSpecDecl>> parse_AccessSpecDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<AddrLabelExpr>> parse_AddrLabelExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ArrayInitIndexExpr>> parse_ArrayInitIndexExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ArrayInitLoopExpr>> parse_ArrayInitLoopExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ArraySubscriptExpr>> parse_ArraySubscriptExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<AsmStmt>> parse_AsmStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<AtomicExpr>> parse_AtomicExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BinaryConditionalOperator>> parse_BinaryConditionalOperator(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>> parse_BinaryOperator(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BindingDecl>> parse_BindingDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BlockDecl>> parse_BlockDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BlockExpr>> parse_BlockExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<BreakStmt>> parse_BreakStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CStyleCastExpr>> parse_CStyleCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CUDAKernelCallExpr>> parse_CUDAKernelCallExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>> parse_CXXBaseSpecifier(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXBindTemporaryExpr>> parse_CXXBindTemporaryExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXBoolLiteralExpr>> parse_CXXBoolLiteralExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXCatchStmt>> parse_CXXCatchStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXConstCastExpr>> parse_CXXConstCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXConstructExpr>> parse_CXXConstructExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXConstructorDecl>> parse_CXXConstructorDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXConversionDecl>> parse_CXXConversionDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>> parse_CXXCtorInitializer(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDeductionGuideDecl>> parse_CXXDeductionGuideDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDefaultArgExpr>> parse_CXXDefaultArgExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDeleteExpr>> parse_CXXDeleteExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDependentScopeMemberExpr>> parse_CXXDependentScopeMemberExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDestructorDecl>> parse_CXXDestructorDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXDynamicCastExpr>> parse_CXXDynamicCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXForRangeStmt>> parse_CXXForRangeStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXFunctionalCastExpr>> parse_CXXFunctionalCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXMemberCallExpr>> parse_CXXMemberCallExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXMethodDecl>> parse_CXXMethodDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXNewExpr>> parse_CXXNewExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXNoexceptExpr>> parse_CXXNoexceptExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXNullPtrLiteralExpr>> parse_CXXNullPtrLiteralExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXOperatorCallExpr>> parse_CXXOperatorCallExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> parse_CXXRecordDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXReinterpretCastExpr>> parse_CXXReinterpretCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXRewrittenBinaryOperator>> parse_CXXRewrittenBinaryOperator(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXStaticCastExpr>> parse_CXXStaticCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXStdInitializerListExpr>> parse_CXXStdInitializerListExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXTemporaryObjectExpr>> parse_CXXTemporaryObjectExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXThisExpr>> parse_CXXThisExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXThrowExpr>> parse_CXXThrowExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXTryStmt>> parse_CXXTryStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CXXUnresolvedConstructExpr>> parse_CXXUnresolvedConstructExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> parse_CallExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CaseStmt>> parse_CaseStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CastExpr>> parse_CastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CharacterLiteral>> parse_CharacterLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ChooseExpr>> parse_ChooseExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ClassTemplateDecl>> parse_ClassTemplateDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ClassTemplatePartialSpecializationDecl>> parse_ClassTemplatePartialSpecializationDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ClassTemplateSpecializationDecl>> parse_ClassTemplateSpecializationDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CoawaitExpr>> parse_CoawaitExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CompoundLiteralExpr>> parse_CompoundLiteralExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CompoundStmt>> parse_CompoundStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ConceptDecl>> parse_ConceptDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ConditionalOperator>> parse_ConditionalOperator(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ConstantExpr>> parse_ConstantExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ContinueStmt>> parse_ContinueStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CoreturnStmt>> parse_CoreturnStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CoroutineBodyStmt>> parse_CoroutineBodyStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<CoyieldExpr>> parse_CoyieldExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<Decl>> parse_Decl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DeclRefExpr>> parse_DeclRefExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DeclStmt>> parse_DeclStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DeclaratorDecl>> parse_DeclaratorDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DecompositionDecl>> parse_DecompositionDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DefaultStmt>> parse_DefaultStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DependentCoawaitExpr>> parse_DependentCoawaitExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DesignatedInitExpr>> parse_DesignatedInitExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<DoStmt>> parse_DoStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<EnumDecl>> parse_EnumDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ExplicitCastExpr>> parse_ExplicitCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<Expr>> parse_Expr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ExprWithCleanups>> parse_ExprWithCleanups(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FieldDecl>> parse_FieldDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FixedPointLiteral>> parse_FixedPointLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FloatingLiteral>> parse_FloatingLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ForStmt>> parse_ForStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FriendDecl>> parse_FriendDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> parse_FunctionDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<FunctionTemplateDecl>> parse_FunctionTemplateDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<GNUNullExpr>> parse_GNUNullExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<GenericSelectionExpr>> parse_GenericSelectionExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<GotoStmt>> parse_GotoStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<IfStmt>> parse_IfStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ImaginaryLiteral>> parse_ImaginaryLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ImplicitCastExpr>> parse_ImplicitCastExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ImplicitValueInitExpr>> parse_ImplicitValueInitExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<IndirectFieldDecl>> parse_IndirectFieldDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<InitListExpr>> parse_InitListExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<IntegerLiteral>> parse_IntegerLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<LabelDecl>> parse_LabelDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<LabelStmt>> parse_LabelStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>> parse_LambdaCapture(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<LambdaExpr>> parse_LambdaExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<LinkageSpecDecl>> parse_LinkageSpecDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<MaterializeTemporaryExpr>> parse_MaterializeTemporaryExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<MemberExpr>> parse_MemberExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NamedDecl>> parse_NamedDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NamespaceAliasDecl>> parse_NamespaceAliasDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NamespaceDecl>> parse_NamespaceDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>> parse_NestedNameSpecifier(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>> parse_NestedNameSpecifierLoc(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NonTypeTemplateParmDecl>> parse_NonTypeTemplateParmDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<NullStmt>> parse_NullStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<OMPClause>> parse_OMPClause(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<OMPExecutableDirective>> parse_OMPExecutableDirective(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCAtCatchStmt>> parse_ObjCAtCatchStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCAtFinallyStmt>> parse_ObjCAtFinallyStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCAtThrowStmt>> parse_ObjCAtThrowStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCAtTryStmt>> parse_ObjCAtTryStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCAutoreleasePoolStmt>> parse_ObjCAutoreleasePoolStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCCategoryDecl>> parse_ObjCCategoryDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCCategoryImplDecl>> parse_ObjCCategoryImplDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCImplementationDecl>> parse_ObjCImplementationDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCInterfaceDecl>> parse_ObjCInterfaceDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCIvarDecl>> parse_ObjCIvarDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCIvarRefExpr>> parse_ObjCIvarRefExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCMessageExpr>> parse_ObjCMessageExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCMethodDecl>> parse_ObjCMethodDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCPropertyDecl>> parse_ObjCPropertyDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCProtocolDecl>> parse_ObjCProtocolDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ObjCStringLiteral>> parse_ObjCStringLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<OpaqueValueExpr>> parse_OpaqueValueExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ParenExpr>> parse_ParenExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ParenListExpr>> parse_ParenListExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ParmVarDecl>> parse_ParmVarDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<PredefinedExpr>> parse_PredefinedExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<QualType>> parse_QualType(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<RecordDecl>> parse_RecordDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ReturnStmt>> parse_ReturnStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<StaticAssertDecl>> parse_StaticAssertDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<StmtExpr>> parse_StmtExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<SubstNonTypeTemplateParmExpr>> parse_SubstNonTypeTemplateParmExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<SwitchCase>> parse_SwitchCase(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<SwitchStmt>> parse_SwitchStmt(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TagDecl>> parse_TagDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TemplateTemplateParmDecl>> parse_TemplateTemplateParmDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TemplateTypeParmDecl>> parse_TemplateTypeParmDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TranslationUnitDecl>> parse_TranslationUnitDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TypeAliasDecl>> parse_TypeAliasDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TypeAliasTemplateDecl>> parse_TypeAliasTemplateDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TypedefDecl>> parse_TypedefDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<TypedefNameDecl>> parse_TypedefNameDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnaryExprOrTypeTraitExpr>> parse_UnaryExprOrTypeTraitExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnaryOperator>> parse_UnaryOperator(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnresolvedLookupExpr>> parse_UnresolvedLookupExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnresolvedMemberExpr>> parse_UnresolvedMemberExpr(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnresolvedUsingTypenameDecl>> parse_UnresolvedUsingTypenameDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UnresolvedUsingValueDecl>> parse_UnresolvedUsingValueDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UserDefinedLiteral>> parse_UserDefinedLiteral(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UsingDecl>> parse_UsingDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UsingDirectiveDecl>> parse_UsingDirectiveDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<UsingEnumDecl>> parse_UsingEnumDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<ValueDecl>> parse_ValueDecl(BaseCRNode* Root);
std::optional<clang::ast_matchers::internal::Matcher<VarDecl>> parse_VarDecl(BaseCRNode* Root);

std::optional<std::string> parse_string(BaseCRNode* Root) {
  CRNode* RootAsCRNode = dyn_cast<CRNode>(Root);
  if (!RootAsCRNode) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  LOG_DEBUG("Handling matcher with name: " << RootAsCRNode->Value);

  return RootAsCRNode->Value;
}

std::optional<int64_t> parse_int64_t(BaseCRNode* Root) {
  CRNode* RootAsCRNode = dyn_cast<CRNode>(Root);
  if (!RootAsCRNode) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  LOG_DEBUG("Handling matcher with name: " << RootAsCRNode->Value);

  return std::stoll(RootAsCRNode->Value);
}
std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>> generate_cxxBaseSpecifier_CXXBaseSpecifier(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier());
  }
  case 1: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBaseSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBaseSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBaseSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBaseSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBaseSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBaseSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBaseSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBaseSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBaseSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBaseSpecifier(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXBaseSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBaseSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBaseSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBaseSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBaseSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBaseSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBaseSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBaseSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBaseSpecifier(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXBaseSpecifier(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>>(cxxBaseSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>> generate_cxxCtorInitializer_CXXCtorInitializer(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer());
  }
  case 1: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCtorInitializer(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCtorInitializer(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCtorInitializer(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCtorInitializer(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCtorInitializer(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCtorInitializer(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCtorInitializer(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCtorInitializer(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCtorInitializer(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXCtorInitializer(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXCtorInitializer(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCtorInitializer(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCtorInitializer(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCtorInitializer(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCtorInitializer(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCtorInitializer(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCtorInitializer(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCtorInitializer(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXCtorInitializer(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXCtorInitializer(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>>(cxxCtorInitializer(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_accessSpecDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl());
  }
  case 1: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AccessSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AccessSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AccessSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AccessSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AccessSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AccessSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AccessSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AccessSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AccessSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AccessSpecDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_AccessSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AccessSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AccessSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AccessSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AccessSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AccessSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AccessSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AccessSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AccessSpecDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_AccessSpecDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(accessSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_bindingDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl());
  }
  case 1: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BindingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BindingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BindingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BindingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BindingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BindingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BindingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BindingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BindingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BindingDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BindingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BindingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BindingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BindingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BindingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BindingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BindingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BindingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BindingDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BindingDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(bindingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_blockDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl());
  }
  case 1: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BlockDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BlockDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BlockDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BlockDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(blockDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_classTemplateDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl());
  }
  case 1: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ClassTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ClassTemplateDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_classTemplatePartialSpecializationDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl());
  }
  case 1: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ClassTemplatePartialSpecializationDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplatePartialSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_classTemplateSpecializationDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl());
  }
  case 1: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplateSpecializationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ClassTemplateSpecializationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ClassTemplateSpecializationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ClassTemplateSpecializationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ClassTemplateSpecializationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ClassTemplateSpecializationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ClassTemplateSpecializationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ClassTemplateSpecializationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ClassTemplateSpecializationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ClassTemplateSpecializationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ClassTemplateSpecializationDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(classTemplateSpecializationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_conceptDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl());
  }
  case 1: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConceptDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConceptDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConceptDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConceptDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConceptDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConceptDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConceptDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConceptDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConceptDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConceptDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ConceptDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConceptDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConceptDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConceptDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConceptDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConceptDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConceptDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConceptDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConceptDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ConceptDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(conceptDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxConstructorDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstructorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXConstructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstructorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXConstructorDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConstructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxConversionDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConversionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConversionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConversionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConversionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConversionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConversionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConversionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConversionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConversionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConversionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXConversionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConversionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConversionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConversionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConversionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConversionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConversionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConversionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConversionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXConversionDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxConversionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxDeductionGuideDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeductionGuideDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeductionGuideDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeductionGuideDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeductionGuideDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeductionGuideDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeductionGuideDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeductionGuideDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeductionGuideDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeductionGuideDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDeductionGuideDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDeductionGuideDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeductionGuideDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeductionGuideDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeductionGuideDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeductionGuideDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeductionGuideDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeductionGuideDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeductionGuideDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDeductionGuideDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDeductionGuideDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDeductionGuideDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxDestructorDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDestructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDestructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDestructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDestructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDestructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDestructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDestructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDestructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDestructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDestructorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDestructorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDestructorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDestructorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDestructorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDestructorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDestructorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDestructorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDestructorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDestructorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDestructorDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxDestructorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxMethodDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXMethodDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXMethodDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXMethodDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_cxxRecordDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl());
  }
  case 1: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXRecordDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXRecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXRecordDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXRecordDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(cxxRecordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_functionDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl());
  }
  case 1: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FunctionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FunctionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FunctionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FunctionDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_functionTemplateDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl());
  }
  case 1: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FunctionTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FunctionTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FunctionTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FunctionTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FunctionTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FunctionTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FunctionTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FunctionTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FunctionTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FunctionTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FunctionTemplateDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(functionTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_indirectFieldDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl());
  }
  case 1: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IndirectFieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IndirectFieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IndirectFieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IndirectFieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IndirectFieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IndirectFieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IndirectFieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IndirectFieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IndirectFieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IndirectFieldDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_IndirectFieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IndirectFieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IndirectFieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IndirectFieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IndirectFieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IndirectFieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IndirectFieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IndirectFieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IndirectFieldDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_IndirectFieldDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(indirectFieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_labelDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl());
  }
  case 1: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LabelDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_LabelDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LabelDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_LabelDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(labelDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_linkageSpecDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl());
  }
  case 1: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LinkageSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LinkageSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LinkageSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LinkageSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LinkageSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LinkageSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LinkageSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LinkageSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LinkageSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LinkageSpecDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_LinkageSpecDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LinkageSpecDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LinkageSpecDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LinkageSpecDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LinkageSpecDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LinkageSpecDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LinkageSpecDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LinkageSpecDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LinkageSpecDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_LinkageSpecDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(linkageSpecDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_namespaceAliasDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl());
  }
  case 1: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamespaceAliasDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NamespaceAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamespaceAliasDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NamespaceAliasDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_namespaceDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl());
  }
  case 1: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamespaceDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NamespaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamespaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamespaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamespaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamespaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamespaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamespaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamespaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamespaceDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NamespaceDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namespaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_nonTypeTemplateParmDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl());
  }
  case 1: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NonTypeTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NonTypeTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NonTypeTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NonTypeTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NonTypeTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NonTypeTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NonTypeTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NonTypeTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NonTypeTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NonTypeTemplateParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NonTypeTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NonTypeTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NonTypeTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NonTypeTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NonTypeTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NonTypeTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NonTypeTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NonTypeTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NonTypeTemplateParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NonTypeTemplateParmDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(nonTypeTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcCategoryDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCCategoryDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCCategoryDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCCategoryDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCCategoryDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcCategoryImplDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryImplDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryImplDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryImplDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryImplDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryImplDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryImplDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryImplDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryImplDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryImplDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCCategoryImplDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCCategoryImplDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCCategoryImplDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCCategoryImplDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCCategoryImplDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCCategoryImplDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCCategoryImplDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCCategoryImplDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCCategoryImplDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCCategoryImplDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCCategoryImplDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcCategoryImplDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcImplementationDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCImplementationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCImplementationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCImplementationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCImplementationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCImplementationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCImplementationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCImplementationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCImplementationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCImplementationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCImplementationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCImplementationDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCImplementationDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCImplementationDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCImplementationDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCImplementationDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCImplementationDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCImplementationDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCImplementationDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCImplementationDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCImplementationDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcImplementationDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcInterfaceDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCInterfaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCInterfaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCInterfaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCInterfaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCInterfaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCInterfaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCInterfaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCInterfaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCInterfaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCInterfaceDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCInterfaceDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCInterfaceDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCInterfaceDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCInterfaceDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCInterfaceDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCInterfaceDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCInterfaceDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCInterfaceDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCInterfaceDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCInterfaceDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcInterfaceDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcIvarDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCIvarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCIvarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCIvarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCIvarDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcIvarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcMethodDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCMethodDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCMethodDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMethodDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMethodDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMethodDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMethodDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMethodDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMethodDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMethodDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCMethodDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCMethodDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcMethodDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcPropertyDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCPropertyDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCPropertyDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCPropertyDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCPropertyDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCPropertyDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCPropertyDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCPropertyDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCPropertyDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCPropertyDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCPropertyDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCPropertyDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCPropertyDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCPropertyDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCPropertyDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCPropertyDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCPropertyDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCPropertyDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCPropertyDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCPropertyDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCPropertyDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcPropertyDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_objcProtocolDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl());
  }
  case 1: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCProtocolDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCProtocolDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCProtocolDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCProtocolDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCProtocolDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCProtocolDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCProtocolDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCProtocolDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCProtocolDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCProtocolDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCProtocolDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCProtocolDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCProtocolDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCProtocolDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCProtocolDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCProtocolDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCProtocolDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCProtocolDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCProtocolDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCProtocolDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(objcProtocolDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_parmVarDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl());
  }
  case 1: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParmVarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParmVarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParmVarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParmVarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParmVarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParmVarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParmVarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParmVarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParmVarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParmVarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ParmVarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParmVarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParmVarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParmVarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParmVarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParmVarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParmVarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParmVarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParmVarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ParmVarDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(parmVarDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_recordDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl());
  }
  case 1: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_RecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_RecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_RecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_RecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_RecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_RecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_RecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_RecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_RecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_RecordDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_RecordDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_RecordDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_RecordDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_RecordDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_RecordDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_RecordDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_RecordDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_RecordDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_RecordDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_RecordDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(recordDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_staticAssertDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl());
  }
  case 1: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StaticAssertDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StaticAssertDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StaticAssertDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StaticAssertDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StaticAssertDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StaticAssertDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StaticAssertDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StaticAssertDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StaticAssertDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_StaticAssertDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_StaticAssertDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StaticAssertDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StaticAssertDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StaticAssertDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StaticAssertDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StaticAssertDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StaticAssertDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StaticAssertDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_StaticAssertDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_StaticAssertDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(staticAssertDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_tagDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl());
  }
  case 1: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TagDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TagDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TagDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TagDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TagDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TagDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TagDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TagDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TagDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TagDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TagDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TagDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TagDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TagDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TagDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TagDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TagDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TagDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TagDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TagDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(tagDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_templateTemplateParmDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl());
  }
  case 1: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TemplateTemplateParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TemplateTemplateParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTemplateParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTemplateParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTemplateParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTemplateParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTemplateParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTemplateParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTemplateParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TemplateTemplateParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TemplateTemplateParmDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTemplateParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_templateTypeParmDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl());
  }
  case 1: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTypeParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTypeParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTypeParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTypeParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTypeParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTypeParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTypeParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTypeParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTypeParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TemplateTypeParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TemplateTypeParmDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TemplateTypeParmDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TemplateTypeParmDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TemplateTypeParmDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TemplateTypeParmDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TemplateTypeParmDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TemplateTypeParmDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TemplateTypeParmDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TemplateTypeParmDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TemplateTypeParmDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(templateTypeParmDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_translationUnitDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl());
  }
  case 1: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TranslationUnitDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TranslationUnitDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TranslationUnitDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TranslationUnitDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TranslationUnitDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TranslationUnitDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TranslationUnitDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TranslationUnitDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TranslationUnitDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TranslationUnitDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TranslationUnitDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TranslationUnitDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TranslationUnitDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TranslationUnitDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TranslationUnitDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TranslationUnitDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TranslationUnitDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TranslationUnitDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TranslationUnitDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TranslationUnitDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(translationUnitDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_typeAliasDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl());
  }
  case 1: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypeAliasDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TypeAliasDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypeAliasDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TypeAliasDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_typeAliasTemplateDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl());
  }
  case 1: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypeAliasTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TypeAliasTemplateDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypeAliasTemplateDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypeAliasTemplateDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypeAliasTemplateDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypeAliasTemplateDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypeAliasTemplateDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypeAliasTemplateDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypeAliasTemplateDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypeAliasTemplateDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TypeAliasTemplateDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typeAliasTemplateDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_typedefDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl());
  }
  case 1: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypedefDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TypedefDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypedefDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TypedefDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_typedefNameDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl());
  }
  case 1: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefNameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefNameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefNameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefNameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefNameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefNameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefNameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefNameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefNameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypedefNameDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_TypedefNameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_TypedefNameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_TypedefNameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_TypedefNameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_TypedefNameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_TypedefNameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_TypedefNameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_TypedefNameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_TypedefNameDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_TypedefNameDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(typedefNameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_unresolvedUsingTypenameDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl());
  }
  case 1: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnresolvedUsingTypenameDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingTypenameDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_unresolvedUsingValueDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl());
  }
  case 1: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedUsingValueDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnresolvedUsingValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedUsingValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedUsingValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedUsingValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedUsingValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedUsingValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedUsingValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedUsingValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedUsingValueDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnresolvedUsingValueDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(unresolvedUsingValueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_usingDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl());
  }
  case 1: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UsingDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UsingDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_usingDirectiveDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl());
  }
  case 1: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDirectiveDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDirectiveDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDirectiveDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDirectiveDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDirectiveDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDirectiveDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDirectiveDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDirectiveDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDirectiveDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingDirectiveDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UsingDirectiveDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingDirectiveDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingDirectiveDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingDirectiveDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingDirectiveDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingDirectiveDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingDirectiveDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingDirectiveDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingDirectiveDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UsingDirectiveDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingDirectiveDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_usingEnumDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl());
  }
  case 1: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingEnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingEnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingEnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingEnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingEnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingEnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingEnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingEnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingEnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingEnumDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UsingEnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UsingEnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UsingEnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UsingEnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UsingEnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UsingEnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UsingEnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UsingEnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UsingEnumDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UsingEnumDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(usingEnumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_valueDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl());
  }
  case 1: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ValueDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ValueDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ValueDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ValueDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ValueDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ValueDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ValueDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ValueDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ValueDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ValueDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ValueDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(valueDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_varDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl());
  }
  case 1: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_VarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_VarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_VarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_VarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_VarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_VarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_VarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_VarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_VarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_VarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_VarDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_VarDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_VarDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_VarDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_VarDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_VarDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_VarDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_VarDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_VarDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_VarDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(varDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_namedDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl());
  }
  case 1: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamedDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamedDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamedDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamedDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamedDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamedDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamedDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamedDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamedDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamedDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NamedDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NamedDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NamedDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NamedDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NamedDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NamedDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NamedDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NamedDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NamedDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NamedDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(namedDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_decl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl());
  }
  case 1: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Decl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Decl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Decl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Decl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Decl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Decl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Decl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Decl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Decl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_Decl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Decl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Decl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Decl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Decl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Decl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Decl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Decl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_Decl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_Decl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_declaratorDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl());
  }
  case 1: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclaratorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclaratorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclaratorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclaratorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclaratorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclaratorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclaratorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclaratorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclaratorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclaratorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DeclaratorDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclaratorDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclaratorDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclaratorDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclaratorDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclaratorDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclaratorDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclaratorDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclaratorDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DeclaratorDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(declaratorDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_decompositionDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl());
  }
  case 1: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DecompositionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DecompositionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DecompositionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DecompositionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DecompositionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DecompositionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DecompositionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DecompositionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DecompositionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DecompositionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DecompositionDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DecompositionDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DecompositionDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DecompositionDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DecompositionDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DecompositionDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DecompositionDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DecompositionDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DecompositionDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DecompositionDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(decompositionDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_enumDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl());
  }
  case 1: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_EnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_EnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_EnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_EnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_EnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_EnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_EnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_EnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_EnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_EnumDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_EnumDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_EnumDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_EnumDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_EnumDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_EnumDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_EnumDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_EnumDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_EnumDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_EnumDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_EnumDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(enumDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_fieldDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl());
  }
  case 1: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FieldDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FieldDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FieldDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FieldDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FieldDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FieldDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FieldDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FieldDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FieldDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FieldDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FieldDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(fieldDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> generate_friendDecl_Decl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl());
  }
  case 1: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FriendDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FriendDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FriendDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FriendDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FriendDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FriendDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FriendDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FriendDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FriendDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FriendDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FriendDecl(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FriendDecl(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FriendDecl(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FriendDecl(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FriendDecl(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FriendDecl(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FriendDecl(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FriendDecl(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FriendDecl(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FriendDecl(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Decl>>(friendDecl(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> generate_callExpr_CallExpr(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(callExpr());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_callExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr());
  }
  case 1: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value()).bind("x"));
  }
  case 2: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value()).bind("x"));
  }
  case 3: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CallExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(callExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> generate_callee_CallExpr(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Decl(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(callee(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(callee(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>> generate_hasRHS_BinaryOperator(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Expr(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(hasRHS(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(hasRHS(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>> generate_hasLHS_BinaryOperator(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Expr(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(hasLHS(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(hasLHS(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> generate_hasAnyArgument_CallExpr(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Expr(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(hasAnyArgument(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(hasAnyArgument(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> generate_hasDeclaration_CallExpr(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Decl(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(hasDeclaration(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Decl(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CallExpr>>(hasDeclaration(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CaseStmt>> generate_hasCaseConstant_CaseStmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_Expr(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CaseStmt>>(hasCaseConstant(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CaseStmt>>(hasCaseConstant(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_caseStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_CaseStmt(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(caseStmt(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_CaseStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(caseStmt(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_castExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_CastExpr(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(castExpr(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_CastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(castExpr(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>> generate_binaryOperator_BinaryOperator(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator());
  }
  case 1: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BinaryOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_parameterCountIs_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_int64_t(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(parameterCountIs(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_int64_t(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(parameterCountIs(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_hasTrailingReturn_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(hasTrailingReturn());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_hasOverloadedOperatorName_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_string(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(hasOverloadedOperatorName(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_string(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(hasOverloadedOperatorName(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_hasDynamicExceptionSpec_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(hasDynamicExceptionSpec());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isConsteval_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isConsteval());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isConstexpr_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isConstexpr());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isDefaulted_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isDefaulted());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isDefinition_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isDefinition());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isDeleted_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isDeleted());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isExternC_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isExternC());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isInline_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isInline());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isMain_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isMain());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isNoReturn_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isNoReturn());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isNoThrow_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isNoThrow());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isStaticStorageClass_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isStaticStorageClass());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_hasDefinition_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(hasDefinition());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isDerivedFrom_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_string(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isDerivedFrom(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_string(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isDerivedFrom(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isDirectlyDerivedFrom_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_string(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isDirectlyDerivedFrom(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_string(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isDirectlyDerivedFrom(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isExplicitTemplateSpecialization_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isExplicitTemplateSpecialization());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isFinal_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isFinal());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isLambda_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isLambda());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> generate_isSameOrDerivedFrom_CXXRecordDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_string(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isSameOrDerivedFrom(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_string(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>>(isSameOrDerivedFrom(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isVariadic_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isVariadic());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> generate_isWeak_FunctionDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>>(isWeak());
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NamedDecl>> generate_hasName_NamedDecl(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    auto Arg0 = parse_string(Root);
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NamedDecl>>(hasName(Arg0.value()));
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 1: {
    auto Arg0 = parse_string(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NamedDecl>>(hasName(Arg0.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>> generate_lambdaCapture_LambdaCapture(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture());
  }
  case 1: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaCapture(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaCapture(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaCapture(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaCapture(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaCapture(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaCapture(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaCapture(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaCapture(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaCapture(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LambdaCapture(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_LambdaCapture(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaCapture(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaCapture(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaCapture(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaCapture(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaCapture(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaCapture(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaCapture(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LambdaCapture(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_LambdaCapture(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>>(lambdaCapture(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>> generate_nestedNameSpecifierLoc_NestedNameSpecifierLoc(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc());
  }
  case 1: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifierLoc(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifierLoc(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifierLoc(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifierLoc(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifierLoc(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifierLoc(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifierLoc(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifierLoc(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifierLoc(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NestedNameSpecifierLoc(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NestedNameSpecifierLoc(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifierLoc(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifierLoc(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifierLoc(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifierLoc(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifierLoc(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifierLoc(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifierLoc(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NestedNameSpecifierLoc(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NestedNameSpecifierLoc(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>>(nestedNameSpecifierLoc(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>> generate_nestedNameSpecifier_NestedNameSpecifier(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier());
  }
  case 1: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NestedNameSpecifier(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NestedNameSpecifier(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NestedNameSpecifier(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NestedNameSpecifier(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NestedNameSpecifier(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NestedNameSpecifier(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NestedNameSpecifier(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NestedNameSpecifier(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NestedNameSpecifier(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NestedNameSpecifier(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NestedNameSpecifier(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>>(nestedNameSpecifier(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<OMPClause>> generate_ompDefaultClause_OMPClause(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause());
  }
  case 1: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPClause(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPClause(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPClause(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPClause(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPClause(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPClause(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPClause(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPClause(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPClause(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OMPClause(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_OMPClause(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPClause(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPClause(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPClause(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPClause(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPClause(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPClause(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPClause(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OMPClause(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_OMPClause(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<OMPClause>>(ompDefaultClause(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<QualType>> generate_qualType_QualType(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType());
  }
  case 1: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_QualType(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_QualType(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_QualType(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_QualType(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_QualType(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_QualType(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_QualType(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_QualType(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_QualType(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_QualType(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_QualType(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_QualType(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_QualType(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_QualType(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_QualType(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_QualType(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_QualType(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_QualType(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_QualType(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_QualType(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<QualType>>(qualType(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_addrLabelExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr());
  }
  case 1: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AddrLabelExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AddrLabelExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AddrLabelExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AddrLabelExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AddrLabelExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AddrLabelExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AddrLabelExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AddrLabelExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AddrLabelExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AddrLabelExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_AddrLabelExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AddrLabelExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AddrLabelExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AddrLabelExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AddrLabelExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AddrLabelExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AddrLabelExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AddrLabelExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AddrLabelExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_AddrLabelExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(addrLabelExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_arrayInitIndexExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr());
  }
  case 1: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitIndexExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitIndexExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitIndexExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitIndexExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitIndexExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitIndexExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitIndexExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitIndexExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitIndexExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArrayInitIndexExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ArrayInitIndexExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitIndexExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitIndexExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitIndexExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitIndexExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitIndexExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitIndexExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitIndexExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArrayInitIndexExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ArrayInitIndexExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitIndexExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_arrayInitLoopExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr());
  }
  case 1: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitLoopExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitLoopExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitLoopExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitLoopExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitLoopExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitLoopExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitLoopExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitLoopExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitLoopExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArrayInitLoopExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ArrayInitLoopExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArrayInitLoopExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArrayInitLoopExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArrayInitLoopExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArrayInitLoopExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArrayInitLoopExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArrayInitLoopExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArrayInitLoopExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArrayInitLoopExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ArrayInitLoopExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arrayInitLoopExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_arraySubscriptExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr());
  }
  case 1: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArraySubscriptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArraySubscriptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArraySubscriptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArraySubscriptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArraySubscriptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArraySubscriptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArraySubscriptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArraySubscriptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArraySubscriptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArraySubscriptExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ArraySubscriptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ArraySubscriptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ArraySubscriptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ArraySubscriptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ArraySubscriptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ArraySubscriptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ArraySubscriptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ArraySubscriptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ArraySubscriptExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ArraySubscriptExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(arraySubscriptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_asmStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt());
  }
  case 1: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AsmStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AsmStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AsmStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AsmStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AsmStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AsmStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AsmStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AsmStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AsmStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AsmStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_AsmStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AsmStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AsmStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AsmStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AsmStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AsmStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AsmStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AsmStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AsmStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_AsmStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(asmStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_atomicExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr());
  }
  case 1: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AtomicExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AtomicExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AtomicExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AtomicExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AtomicExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AtomicExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AtomicExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AtomicExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AtomicExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AtomicExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_AtomicExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_AtomicExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_AtomicExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_AtomicExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_AtomicExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_AtomicExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_AtomicExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_AtomicExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_AtomicExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_AtomicExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(atomicExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_autoreleasePoolStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt());
  }
  case 1: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCAutoreleasePoolStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(autoreleasePoolStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_binaryConditionalOperator_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator());
  }
  case 1: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryConditionalOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BinaryConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryConditionalOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BinaryConditionalOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryConditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_binaryOperator_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator());
  }
  case 1: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BinaryOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(binaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_blockExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr());
  }
  case 1: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BlockExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BlockExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BlockExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BlockExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BlockExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BlockExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BlockExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BlockExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BlockExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BlockExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BlockExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(blockExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_breakStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt());
  }
  case 1: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BreakStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BreakStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BreakStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BreakStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BreakStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BreakStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BreakStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BreakStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BreakStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BreakStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_BreakStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_BreakStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_BreakStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_BreakStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_BreakStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_BreakStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_BreakStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_BreakStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_BreakStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_BreakStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(breakStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cStyleCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CStyleCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CStyleCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CStyleCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CStyleCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CStyleCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CStyleCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CStyleCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CStyleCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CStyleCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CStyleCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CStyleCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CStyleCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CStyleCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CStyleCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CStyleCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CStyleCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CStyleCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CStyleCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CStyleCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CStyleCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cStyleCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_characterLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral());
  }
  case 1: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CharacterLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CharacterLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CharacterLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CharacterLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CharacterLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CharacterLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CharacterLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CharacterLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CharacterLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CharacterLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CharacterLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CharacterLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CharacterLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CharacterLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CharacterLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CharacterLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CharacterLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CharacterLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CharacterLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CharacterLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(characterLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_chooseExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr());
  }
  case 1: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ChooseExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ChooseExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ChooseExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ChooseExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ChooseExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ChooseExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ChooseExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ChooseExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ChooseExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ChooseExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ChooseExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ChooseExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ChooseExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ChooseExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ChooseExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ChooseExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ChooseExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ChooseExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ChooseExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ChooseExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(chooseExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_coawaitExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr());
  }
  case 1: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoawaitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoawaitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CoawaitExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_compoundLiteralExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr());
  }
  case 1: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CompoundLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CompoundLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CompoundLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CompoundLiteralExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_compoundStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt());
  }
  case 1: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CompoundStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CompoundStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CompoundStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CompoundStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CompoundStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CompoundStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CompoundStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CompoundStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CompoundStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CompoundStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CompoundStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(compoundStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_conditionalOperator_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator());
  }
  case 1: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConditionalOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ConditionalOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConditionalOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConditionalOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConditionalOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConditionalOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConditionalOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConditionalOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConditionalOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConditionalOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ConditionalOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(conditionalOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_constantExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr());
  }
  case 1: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConstantExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConstantExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConstantExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConstantExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConstantExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConstantExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConstantExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConstantExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConstantExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConstantExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ConstantExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ConstantExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ConstantExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ConstantExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ConstantExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ConstantExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ConstantExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ConstantExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ConstantExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ConstantExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(constantExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_continueStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt());
  }
  case 1: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ContinueStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ContinueStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ContinueStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ContinueStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ContinueStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ContinueStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ContinueStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ContinueStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ContinueStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ContinueStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ContinueStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ContinueStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ContinueStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ContinueStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ContinueStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ContinueStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ContinueStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ContinueStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ContinueStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ContinueStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(continueStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_coreturnStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt());
  }
  case 1: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoreturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoreturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoreturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoreturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoreturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoreturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoreturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoreturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoreturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoreturnStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CoreturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoreturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoreturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoreturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoreturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoreturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoreturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoreturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoreturnStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CoreturnStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coreturnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_coroutineBodyStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt());
  }
  case 1: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoroutineBodyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoroutineBodyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoroutineBodyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoroutineBodyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoroutineBodyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoroutineBodyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoroutineBodyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoroutineBodyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoroutineBodyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoroutineBodyStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CoroutineBodyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoroutineBodyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoroutineBodyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoroutineBodyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoroutineBodyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoroutineBodyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoroutineBodyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoroutineBodyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoroutineBodyStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CoroutineBodyStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coroutineBodyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_coyieldExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr());
  }
  case 1: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoyieldExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoyieldExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoyieldExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoyieldExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoyieldExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoyieldExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoyieldExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoyieldExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoyieldExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoyieldExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CoyieldExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CoyieldExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CoyieldExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CoyieldExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CoyieldExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CoyieldExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CoyieldExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CoyieldExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CoyieldExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CoyieldExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(coyieldExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cudaKernelCallExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr());
  }
  case 1: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CUDAKernelCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CUDAKernelCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CUDAKernelCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CUDAKernelCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CUDAKernelCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CUDAKernelCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CUDAKernelCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CUDAKernelCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CUDAKernelCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CUDAKernelCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CUDAKernelCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CUDAKernelCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CUDAKernelCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CUDAKernelCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CUDAKernelCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CUDAKernelCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CUDAKernelCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CUDAKernelCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CUDAKernelCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CUDAKernelCallExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cudaKernelCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxBindTemporaryExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBindTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBindTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBindTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBindTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBindTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBindTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBindTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBindTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBindTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBindTemporaryExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXBindTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBindTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBindTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBindTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBindTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBindTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBindTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBindTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBindTemporaryExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXBindTemporaryExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBindTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxBoolLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral());
  }
  case 1: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBoolLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBoolLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBoolLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBoolLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBoolLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBoolLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBoolLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBoolLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBoolLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBoolLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXBoolLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXBoolLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXBoolLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXBoolLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXBoolLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXBoolLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXBoolLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXBoolLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXBoolLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXBoolLiteralExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxBoolLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxCatchStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt());
  }
  case 1: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXCatchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXCatchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXCatchStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxConstCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXConstCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXConstCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxConstructExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstructExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXConstructExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXConstructExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxDefaultArgExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDefaultArgExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDefaultArgExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDefaultArgExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDefaultArgExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDefaultArgExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDefaultArgExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDefaultArgExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDefaultArgExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDefaultArgExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDefaultArgExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDefaultArgExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDefaultArgExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDefaultArgExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDefaultArgExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDefaultArgExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDefaultArgExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDefaultArgExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDefaultArgExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDefaultArgExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDefaultArgExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDefaultArgExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxDeleteExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeleteExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeleteExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeleteExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeleteExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeleteExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeleteExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeleteExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeleteExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeleteExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDeleteExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDeleteExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDeleteExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDeleteExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDeleteExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDeleteExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDeleteExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDeleteExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDeleteExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDeleteExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDeleteExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDeleteExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxDependentScopeMemberExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDependentScopeMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDependentScopeMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDependentScopeMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDependentScopeMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDependentScopeMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDependentScopeMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDependentScopeMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDependentScopeMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDependentScopeMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDependentScopeMemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDependentScopeMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDependentScopeMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDependentScopeMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDependentScopeMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDependentScopeMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDependentScopeMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDependentScopeMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDependentScopeMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDependentScopeMemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDependentScopeMemberExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDependentScopeMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxDynamicCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDynamicCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDynamicCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDynamicCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDynamicCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDynamicCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDynamicCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDynamicCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDynamicCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDynamicCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDynamicCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXDynamicCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXDynamicCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXDynamicCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXDynamicCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXDynamicCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXDynamicCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXDynamicCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXDynamicCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXDynamicCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXDynamicCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxDynamicCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxForRangeStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt());
  }
  case 1: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXForRangeStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXForRangeStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXForRangeStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXForRangeStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXForRangeStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXForRangeStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXForRangeStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXForRangeStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXForRangeStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXForRangeStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXForRangeStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXForRangeStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXForRangeStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXForRangeStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXForRangeStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXForRangeStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXForRangeStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXForRangeStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXForRangeStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXForRangeStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxForRangeStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxFunctionalCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXFunctionalCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXFunctionalCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXFunctionalCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXFunctionalCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXFunctionalCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXFunctionalCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXFunctionalCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXFunctionalCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXFunctionalCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXFunctionalCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXFunctionalCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXFunctionalCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXFunctionalCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXFunctionalCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXFunctionalCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXFunctionalCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXFunctionalCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXFunctionalCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXFunctionalCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXFunctionalCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxFunctionalCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxMemberCallExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMemberCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMemberCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMemberCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMemberCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMemberCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMemberCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMemberCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMemberCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMemberCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXMemberCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXMemberCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXMemberCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXMemberCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXMemberCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXMemberCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXMemberCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXMemberCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXMemberCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXMemberCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXMemberCallExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxMemberCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxNewExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNewExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNewExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNewExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNewExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNewExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNewExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNewExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNewExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNewExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNewExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXNewExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNewExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNewExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNewExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNewExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNewExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNewExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNewExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNewExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXNewExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNewExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxNoexceptExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNoexceptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNoexceptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNoexceptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNoexceptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNoexceptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNoexceptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNoexceptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNoexceptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNoexceptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNoexceptExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXNoexceptExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNoexceptExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNoexceptExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNoexceptExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNoexceptExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNoexceptExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNoexceptExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNoexceptExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNoexceptExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXNoexceptExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNoexceptExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxNullPtrLiteralExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNullPtrLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNullPtrLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNullPtrLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNullPtrLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNullPtrLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNullPtrLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNullPtrLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNullPtrLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNullPtrLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNullPtrLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXNullPtrLiteralExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXNullPtrLiteralExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXNullPtrLiteralExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXNullPtrLiteralExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXNullPtrLiteralExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXNullPtrLiteralExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXNullPtrLiteralExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXNullPtrLiteralExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXNullPtrLiteralExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXNullPtrLiteralExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxNullPtrLiteralExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxOperatorCallExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXOperatorCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXOperatorCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXOperatorCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXOperatorCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXOperatorCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXOperatorCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXOperatorCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXOperatorCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXOperatorCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXOperatorCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXOperatorCallExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXOperatorCallExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXOperatorCallExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXOperatorCallExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXOperatorCallExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXOperatorCallExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXOperatorCallExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXOperatorCallExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXOperatorCallExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXOperatorCallExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxOperatorCallExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxReinterpretCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXReinterpretCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXReinterpretCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXReinterpretCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXReinterpretCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXReinterpretCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXReinterpretCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXReinterpretCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXReinterpretCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXReinterpretCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXReinterpretCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXReinterpretCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXReinterpretCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXReinterpretCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXReinterpretCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXReinterpretCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXReinterpretCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXReinterpretCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXReinterpretCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXReinterpretCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXReinterpretCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxReinterpretCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxRewrittenBinaryOperator_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator());
  }
  case 1: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRewrittenBinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRewrittenBinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRewrittenBinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRewrittenBinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRewrittenBinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRewrittenBinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRewrittenBinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRewrittenBinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRewrittenBinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXRewrittenBinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXRewrittenBinaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXRewrittenBinaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXRewrittenBinaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXRewrittenBinaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXRewrittenBinaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXRewrittenBinaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXRewrittenBinaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXRewrittenBinaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXRewrittenBinaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXRewrittenBinaryOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxRewrittenBinaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxStaticCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStaticCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStaticCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStaticCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStaticCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStaticCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStaticCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStaticCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStaticCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStaticCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXStaticCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXStaticCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStaticCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStaticCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStaticCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStaticCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStaticCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStaticCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStaticCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXStaticCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXStaticCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStaticCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxStdInitializerListExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStdInitializerListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStdInitializerListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStdInitializerListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStdInitializerListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStdInitializerListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStdInitializerListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStdInitializerListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStdInitializerListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStdInitializerListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXStdInitializerListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXStdInitializerListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXStdInitializerListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXStdInitializerListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXStdInitializerListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXStdInitializerListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXStdInitializerListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXStdInitializerListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXStdInitializerListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXStdInitializerListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXStdInitializerListExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxStdInitializerListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxTemporaryObjectExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTemporaryObjectExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTemporaryObjectExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTemporaryObjectExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTemporaryObjectExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTemporaryObjectExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTemporaryObjectExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTemporaryObjectExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTemporaryObjectExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTemporaryObjectExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXTemporaryObjectExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXTemporaryObjectExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTemporaryObjectExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTemporaryObjectExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTemporaryObjectExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTemporaryObjectExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTemporaryObjectExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTemporaryObjectExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTemporaryObjectExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXTemporaryObjectExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXTemporaryObjectExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTemporaryObjectExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxThisExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThisExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThisExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThisExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThisExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThisExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThisExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThisExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThisExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThisExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXThisExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXThisExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThisExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThisExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThisExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThisExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThisExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThisExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThisExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXThisExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXThisExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThisExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxThrowExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThrowExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThrowExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThrowExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThrowExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThrowExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThrowExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThrowExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThrowExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThrowExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXThrowExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXThrowExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXThrowExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXThrowExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXThrowExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXThrowExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXThrowExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXThrowExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXThrowExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXThrowExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXThrowExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxThrowExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxTryStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt());
  }
  case 1: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXTryStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXTryStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXTryStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_cxxUnresolvedConstructExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr());
  }
  case 1: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXUnresolvedConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXUnresolvedConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXUnresolvedConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXUnresolvedConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXUnresolvedConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXUnresolvedConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXUnresolvedConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXUnresolvedConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXUnresolvedConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXUnresolvedConstructExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_CXXUnresolvedConstructExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_CXXUnresolvedConstructExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_CXXUnresolvedConstructExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_CXXUnresolvedConstructExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_CXXUnresolvedConstructExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_CXXUnresolvedConstructExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_CXXUnresolvedConstructExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_CXXUnresolvedConstructExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_CXXUnresolvedConstructExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_CXXUnresolvedConstructExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(cxxUnresolvedConstructExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_declRefExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr());
  }
  case 1: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclRefExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DeclRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclRefExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DeclRefExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_declStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt());
  }
  case 1: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DeclStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DeclStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DeclStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DeclStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DeclStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DeclStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DeclStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DeclStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DeclStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DeclStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(declStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_defaultStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt());
  }
  case 1: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DefaultStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DefaultStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DefaultStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DefaultStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DefaultStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DefaultStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DefaultStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DefaultStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DefaultStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DefaultStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DefaultStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DefaultStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DefaultStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DefaultStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DefaultStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DefaultStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DefaultStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DefaultStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DefaultStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DefaultStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(defaultStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_dependentCoawaitExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr());
  }
  case 1: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DependentCoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DependentCoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DependentCoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DependentCoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DependentCoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DependentCoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DependentCoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DependentCoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DependentCoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DependentCoawaitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DependentCoawaitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DependentCoawaitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DependentCoawaitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DependentCoawaitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DependentCoawaitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DependentCoawaitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DependentCoawaitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DependentCoawaitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DependentCoawaitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DependentCoawaitExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(dependentCoawaitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_designatedInitExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr());
  }
  case 1: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DesignatedInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DesignatedInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DesignatedInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DesignatedInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DesignatedInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DesignatedInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DesignatedInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DesignatedInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DesignatedInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DesignatedInitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DesignatedInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DesignatedInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DesignatedInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DesignatedInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DesignatedInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DesignatedInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DesignatedInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DesignatedInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DesignatedInitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DesignatedInitExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(designatedInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_doStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt());
  }
  case 1: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DoStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_DoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_DoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_DoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_DoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_DoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_DoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_DoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_DoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_DoStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_DoStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(doStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_explicitCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr());
  }
  case 1: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ExplicitCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ExplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ExplicitCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ExplicitCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(explicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_expr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr());
  }
  case 1: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Expr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Expr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Expr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Expr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Expr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Expr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Expr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Expr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Expr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_Expr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_Expr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_Expr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_Expr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_Expr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_Expr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_Expr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_Expr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_Expr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_Expr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_Expr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(expr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_exprWithCleanups_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups());
  }
  case 1: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExprWithCleanups(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExprWithCleanups(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExprWithCleanups(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExprWithCleanups(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExprWithCleanups(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExprWithCleanups(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExprWithCleanups(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExprWithCleanups(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExprWithCleanups(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ExprWithCleanups(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ExprWithCleanups(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ExprWithCleanups(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ExprWithCleanups(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ExprWithCleanups(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ExprWithCleanups(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ExprWithCleanups(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ExprWithCleanups(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ExprWithCleanups(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ExprWithCleanups(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ExprWithCleanups(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(exprWithCleanups(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_fixedPointLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral());
  }
  case 1: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FixedPointLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FixedPointLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FixedPointLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FixedPointLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FixedPointLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FixedPointLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FixedPointLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FixedPointLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FixedPointLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FixedPointLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FixedPointLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FixedPointLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FixedPointLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FixedPointLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FixedPointLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FixedPointLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FixedPointLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FixedPointLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FixedPointLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FixedPointLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(fixedPointLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_floatLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral());
  }
  case 1: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FloatingLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FloatingLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FloatingLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FloatingLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FloatingLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FloatingLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FloatingLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FloatingLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FloatingLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FloatingLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_FloatingLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_FloatingLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_FloatingLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_FloatingLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_FloatingLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_FloatingLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_FloatingLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_FloatingLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_FloatingLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_FloatingLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(floatLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_forStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt());
  }
  case 1: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ForStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ForStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ForStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ForStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ForStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ForStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ForStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ForStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ForStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ForStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ForStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ForStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ForStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ForStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ForStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ForStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ForStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ForStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ForStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ForStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(forStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_genericSelectionExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr());
  }
  case 1: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GenericSelectionExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GenericSelectionExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GenericSelectionExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GenericSelectionExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GenericSelectionExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GenericSelectionExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GenericSelectionExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GenericSelectionExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GenericSelectionExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GenericSelectionExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_GenericSelectionExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GenericSelectionExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GenericSelectionExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GenericSelectionExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GenericSelectionExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GenericSelectionExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GenericSelectionExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GenericSelectionExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GenericSelectionExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_GenericSelectionExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(genericSelectionExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_gnuNullExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr());
  }
  case 1: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GNUNullExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GNUNullExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GNUNullExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GNUNullExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GNUNullExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GNUNullExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GNUNullExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GNUNullExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GNUNullExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GNUNullExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_GNUNullExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GNUNullExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GNUNullExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GNUNullExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GNUNullExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GNUNullExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GNUNullExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GNUNullExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GNUNullExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_GNUNullExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gnuNullExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_gotoStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt());
  }
  case 1: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GotoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GotoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GotoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GotoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GotoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GotoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GotoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GotoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GotoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GotoStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_GotoStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_GotoStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_GotoStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_GotoStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_GotoStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_GotoStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_GotoStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_GotoStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_GotoStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_GotoStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(gotoStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_ifStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt());
  }
  case 1: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IfStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IfStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IfStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IfStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IfStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IfStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IfStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IfStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IfStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IfStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_IfStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IfStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IfStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IfStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IfStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IfStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IfStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IfStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IfStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_IfStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ifStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_imaginaryLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral());
  }
  case 1: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImaginaryLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImaginaryLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImaginaryLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImaginaryLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImaginaryLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImaginaryLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImaginaryLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImaginaryLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImaginaryLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImaginaryLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ImaginaryLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImaginaryLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImaginaryLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImaginaryLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImaginaryLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImaginaryLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImaginaryLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImaginaryLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImaginaryLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ImaginaryLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(imaginaryLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_implicitCastExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr());
  }
  case 1: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImplicitCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ImplicitCastExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitCastExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitCastExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitCastExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitCastExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitCastExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitCastExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitCastExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImplicitCastExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ImplicitCastExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitCastExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_implicitValueInitExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr());
  }
  case 1: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitValueInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitValueInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitValueInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitValueInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitValueInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitValueInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitValueInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitValueInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitValueInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImplicitValueInitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ImplicitValueInitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ImplicitValueInitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ImplicitValueInitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ImplicitValueInitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ImplicitValueInitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ImplicitValueInitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ImplicitValueInitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ImplicitValueInitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ImplicitValueInitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ImplicitValueInitExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(implicitValueInitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_initListExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr());
  }
  case 1: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_InitListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_InitListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_InitListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_InitListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_InitListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_InitListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_InitListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_InitListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_InitListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_InitListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_InitListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_InitListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_InitListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_InitListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_InitListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_InitListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_InitListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_InitListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_InitListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_InitListExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(initListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_integerLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral());
  }
  case 1: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IntegerLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IntegerLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IntegerLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IntegerLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IntegerLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IntegerLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IntegerLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IntegerLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IntegerLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IntegerLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_IntegerLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_IntegerLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_IntegerLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_IntegerLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_IntegerLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_IntegerLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_IntegerLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_IntegerLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_IntegerLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_IntegerLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(integerLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_labelStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt());
  }
  case 1: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LabelStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_LabelStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LabelStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LabelStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LabelStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LabelStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LabelStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LabelStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LabelStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LabelStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_LabelStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(labelStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_lambdaExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr());
  }
  case 1: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LambdaExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_LambdaExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_LambdaExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_LambdaExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_LambdaExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_LambdaExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_LambdaExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_LambdaExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_LambdaExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_LambdaExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_LambdaExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(lambdaExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_materializeTemporaryExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr());
  }
  case 1: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MaterializeTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MaterializeTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MaterializeTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MaterializeTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MaterializeTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MaterializeTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MaterializeTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MaterializeTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MaterializeTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_MaterializeTemporaryExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_MaterializeTemporaryExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MaterializeTemporaryExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MaterializeTemporaryExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MaterializeTemporaryExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MaterializeTemporaryExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MaterializeTemporaryExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MaterializeTemporaryExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MaterializeTemporaryExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_MaterializeTemporaryExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_MaterializeTemporaryExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(materializeTemporaryExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_memberExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr());
  }
  case 1: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_MemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_MemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_MemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_MemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_MemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_MemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_MemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_MemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_MemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_MemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_MemberExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(memberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_nullStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt());
  }
  case 1: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NullStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NullStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NullStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NullStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NullStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NullStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NullStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NullStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NullStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NullStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_NullStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_NullStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_NullStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_NullStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_NullStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_NullStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_NullStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_NullStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_NullStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_NullStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(nullStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcCatchStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt());
  }
  case 1: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtCatchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCAtCatchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtCatchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtCatchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtCatchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtCatchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtCatchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtCatchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtCatchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtCatchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCAtCatchStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcCatchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcFinallyStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt());
  }
  case 1: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtFinallyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtFinallyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtFinallyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtFinallyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtFinallyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtFinallyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtFinallyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtFinallyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtFinallyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtFinallyStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCAtFinallyStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtFinallyStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtFinallyStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtFinallyStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtFinallyStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtFinallyStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtFinallyStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtFinallyStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtFinallyStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCAtFinallyStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcFinallyStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcIvarRefExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr());
  }
  case 1: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCIvarRefExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCIvarRefExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCIvarRefExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCIvarRefExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCIvarRefExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCIvarRefExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCIvarRefExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCIvarRefExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCIvarRefExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCIvarRefExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCIvarRefExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcIvarRefExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcMessageExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr());
  }
  case 1: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMessageExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMessageExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMessageExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMessageExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMessageExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMessageExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMessageExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMessageExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMessageExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCMessageExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCMessageExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCMessageExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCMessageExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCMessageExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCMessageExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCMessageExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCMessageExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCMessageExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCMessageExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCMessageExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcMessageExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcStringLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral());
  }
  case 1: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCStringLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCStringLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCStringLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCStringLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCStringLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCStringLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCStringLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCStringLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCStringLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCStringLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCStringLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCStringLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCStringLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCStringLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCStringLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCStringLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCStringLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCStringLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCStringLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCStringLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcStringLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcThrowStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt());
  }
  case 1: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtThrowStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtThrowStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtThrowStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtThrowStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtThrowStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtThrowStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtThrowStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtThrowStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtThrowStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtThrowStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCAtThrowStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtThrowStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtThrowStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtThrowStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtThrowStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtThrowStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtThrowStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtThrowStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtThrowStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCAtThrowStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcThrowStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_objcTryStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt());
  }
  case 1: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtTryStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ObjCAtTryStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ObjCAtTryStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ObjCAtTryStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ObjCAtTryStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ObjCAtTryStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ObjCAtTryStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ObjCAtTryStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ObjCAtTryStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ObjCAtTryStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ObjCAtTryStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(objcTryStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_ompExecutableDirective_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective());
  }
  case 1: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPExecutableDirective(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPExecutableDirective(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPExecutableDirective(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPExecutableDirective(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPExecutableDirective(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPExecutableDirective(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPExecutableDirective(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPExecutableDirective(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPExecutableDirective(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OMPExecutableDirective(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_OMPExecutableDirective(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OMPExecutableDirective(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OMPExecutableDirective(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OMPExecutableDirective(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OMPExecutableDirective(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OMPExecutableDirective(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OMPExecutableDirective(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OMPExecutableDirective(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OMPExecutableDirective(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_OMPExecutableDirective(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(ompExecutableDirective(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_opaqueValueExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr());
  }
  case 1: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OpaqueValueExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OpaqueValueExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OpaqueValueExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OpaqueValueExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OpaqueValueExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OpaqueValueExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OpaqueValueExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OpaqueValueExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OpaqueValueExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OpaqueValueExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_OpaqueValueExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_OpaqueValueExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_OpaqueValueExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_OpaqueValueExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_OpaqueValueExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_OpaqueValueExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_OpaqueValueExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_OpaqueValueExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_OpaqueValueExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_OpaqueValueExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(opaqueValueExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_parenExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr());
  }
  case 1: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParenExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ParenExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParenExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ParenExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_parenListExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr());
  }
  case 1: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParenListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ParenListExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ParenListExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ParenListExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ParenListExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ParenListExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ParenListExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ParenListExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ParenListExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ParenListExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ParenListExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(parenListExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_predefinedExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr());
  }
  case 1: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_PredefinedExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_PredefinedExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_PredefinedExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_PredefinedExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_PredefinedExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_PredefinedExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_PredefinedExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_PredefinedExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_PredefinedExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_PredefinedExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_PredefinedExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_PredefinedExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_PredefinedExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_PredefinedExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_PredefinedExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_PredefinedExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_PredefinedExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_PredefinedExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_PredefinedExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_PredefinedExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(predefinedExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_returnStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt());
  }
  case 1: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ReturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ReturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ReturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ReturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ReturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ReturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ReturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ReturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ReturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ReturnStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_ReturnStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_ReturnStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_ReturnStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_ReturnStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_ReturnStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_ReturnStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_ReturnStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_ReturnStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_ReturnStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_ReturnStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(returnStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_stmtExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr());
  }
  case 1: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StmtExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StmtExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StmtExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StmtExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StmtExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StmtExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StmtExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StmtExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StmtExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_StmtExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_StmtExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_StmtExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_StmtExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_StmtExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_StmtExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_StmtExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_StmtExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_StmtExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_StmtExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_StmtExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(stmtExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_substNonTypeTemplateParmExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr());
  }
  case 1: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_SubstNonTypeTemplateParmExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(substNonTypeTemplateParmExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_switchCase_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase());
  }
  case 1: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchCase(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchCase(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchCase(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchCase(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchCase(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchCase(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchCase(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchCase(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchCase(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SwitchCase(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_SwitchCase(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchCase(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchCase(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchCase(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchCase(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchCase(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchCase(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchCase(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SwitchCase(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_SwitchCase(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchCase(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_switchStmt_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt());
  }
  case 1: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SwitchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_SwitchStmt(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_SwitchStmt(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_SwitchStmt(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_SwitchStmt(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_SwitchStmt(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_SwitchStmt(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_SwitchStmt(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_SwitchStmt(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_SwitchStmt(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_SwitchStmt(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(switchStmt(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_unaryExprOrTypeTraitExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr());
  }
  case 1: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnaryExprOrTypeTraitExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryExprOrTypeTraitExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_unresolvedLookupExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr());
  }
  case 1: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedLookupExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedLookupExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedLookupExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedLookupExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedLookupExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedLookupExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedLookupExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedLookupExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedLookupExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedLookupExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnresolvedLookupExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedLookupExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedLookupExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedLookupExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedLookupExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedLookupExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedLookupExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedLookupExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedLookupExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnresolvedLookupExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedLookupExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_unresolvedMemberExpr_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr());
  }
  case 1: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedMemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnresolvedMemberExpr(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnresolvedMemberExpr(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnresolvedMemberExpr(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnresolvedMemberExpr(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnresolvedMemberExpr(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnresolvedMemberExpr(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnresolvedMemberExpr(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnresolvedMemberExpr(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnresolvedMemberExpr(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnresolvedMemberExpr(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unresolvedMemberExpr(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_userDefinedLiteral_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral());
  }
  case 1: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UserDefinedLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UserDefinedLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UserDefinedLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UserDefinedLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UserDefinedLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UserDefinedLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UserDefinedLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UserDefinedLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UserDefinedLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UserDefinedLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UserDefinedLiteral(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UserDefinedLiteral(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UserDefinedLiteral(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UserDefinedLiteral(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UserDefinedLiteral(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UserDefinedLiteral(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UserDefinedLiteral(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UserDefinedLiteral(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UserDefinedLiteral(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UserDefinedLiteral(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(userDefinedLiteral(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> generate_unaryOperator_Stmt(BaseCRNode* Root) {
  SequenceCRNode* Arguments = dyn_cast<SequenceCRNode>(Root);
  if (!Arguments) {
    LOG_DEBUG("Invalid configuration, expected sequence");
    return {};
  }
  switch (Arguments->Children.size()) {
  case 0: {
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator());
  }
  case 1: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value()));
  }
  case 2: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value()));
  }
  case 3: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value()));
  }
  case 4: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value()));
  }
  case 5: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value()));
  }
  case 6: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value()));
  }
  case 7: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value()));
  }
  case 8: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value()));
  }
  case 9: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value()));
  }
  case 10: {
    auto Arg0 = parse_UnaryOperator(Arguments->Children[0].get());
    if (!Arg0) return {};
    auto Arg1 = parse_UnaryOperator(Arguments->Children[1].get());
    if (!Arg1) return {};
    auto Arg2 = parse_UnaryOperator(Arguments->Children[2].get());
    if (!Arg2) return {};
    auto Arg3 = parse_UnaryOperator(Arguments->Children[3].get());
    if (!Arg3) return {};
    auto Arg4 = parse_UnaryOperator(Arguments->Children[4].get());
    if (!Arg4) return {};
    auto Arg5 = parse_UnaryOperator(Arguments->Children[5].get());
    if (!Arg5) return {};
    auto Arg6 = parse_UnaryOperator(Arguments->Children[6].get());
    if (!Arg6) return {};
    auto Arg7 = parse_UnaryOperator(Arguments->Children[7].get());
    if (!Arg7) return {};
    auto Arg8 = parse_UnaryOperator(Arguments->Children[8].get());
    if (!Arg8) return {};
    auto Arg9 = parse_UnaryOperator(Arguments->Children[9].get());
    if (!Arg9) return {};
    return std::optional<clang::ast_matchers::internal::Matcher<Stmt>>(unaryOperator(Arg0.value(), Arg1.value(), Arg2.value(), Arg3.value(), Arg4.value(), Arg5.value(), Arg6.value(), Arg7.value(), Arg8.value(), Arg9.value()));
  }
  default: {
    LOG_DEBUG("Too many arguments: " << Arguments->Children.size())
    return {};
  }
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BinaryOperator>> parse_BinaryOperator(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("hasRHS"):
    return generate_hasRHS_BinaryOperator(RootAsMap->Children[0].second.get());
  case hashCString("hasLHS"):
    return generate_hasLHS_BinaryOperator(RootAsMap->Children[0].second.get());
  case hashCString("binaryOperator"):
    return generate_binaryOperator_BinaryOperator(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXBaseSpecifier>> parse_CXXBaseSpecifier(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("cxxBaseSpecifier"):
    return generate_cxxBaseSpecifier_CXXBaseSpecifier(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXCtorInitializer>> parse_CXXCtorInitializer(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("cxxCtorInitializer"):
    return generate_cxxCtorInitializer_CXXCtorInitializer(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRecordDecl>> parse_CXXRecordDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("hasDefinition"):
    return generate_hasDefinition_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isDerivedFrom"):
    return generate_isDerivedFrom_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isDirectlyDerivedFrom"):
    return generate_isDirectlyDerivedFrom_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isExplicitTemplateSpecialization"):
    return generate_isExplicitTemplateSpecialization_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isFinal"):
    return generate_isFinal_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isLambda"):
    return generate_isLambda_CXXRecordDecl(RootAsMap->Children[0].second.get());
  case hashCString("isSameOrDerivedFrom"):
    return generate_isSameOrDerivedFrom_CXXRecordDecl(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CallExpr>> parse_CallExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("callExpr"):
    return generate_callExpr_CallExpr(RootAsMap->Children[0].second.get());
  case hashCString("callee"):
    return generate_callee_CallExpr(RootAsMap->Children[0].second.get());
  case hashCString("hasAnyArgument"):
    return generate_hasAnyArgument_CallExpr(RootAsMap->Children[0].second.get());
  case hashCString("hasDeclaration"):
    return generate_hasDeclaration_CallExpr(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CaseStmt>> parse_CaseStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("hasCaseConstant"):
    return generate_hasCaseConstant_CaseStmt(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Decl>> parse_Decl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("accessSpecDecl"):
    return generate_accessSpecDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("bindingDecl"):
    return generate_bindingDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("blockDecl"):
    return generate_blockDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("classTemplateDecl"):
    return generate_classTemplateDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("classTemplatePartialSpecializationDecl"):
    return generate_classTemplatePartialSpecializationDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("classTemplateSpecializationDecl"):
    return generate_classTemplateSpecializationDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("conceptDecl"):
    return generate_conceptDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxConstructorDecl"):
    return generate_cxxConstructorDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxConversionDecl"):
    return generate_cxxConversionDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxDeductionGuideDecl"):
    return generate_cxxDeductionGuideDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxDestructorDecl"):
    return generate_cxxDestructorDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxMethodDecl"):
    return generate_cxxMethodDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("cxxRecordDecl"):
    return generate_cxxRecordDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("functionDecl"):
    return generate_functionDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("functionTemplateDecl"):
    return generate_functionTemplateDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("indirectFieldDecl"):
    return generate_indirectFieldDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("labelDecl"):
    return generate_labelDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("linkageSpecDecl"):
    return generate_linkageSpecDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("namespaceAliasDecl"):
    return generate_namespaceAliasDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("namespaceDecl"):
    return generate_namespaceDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("nonTypeTemplateParmDecl"):
    return generate_nonTypeTemplateParmDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcCategoryDecl"):
    return generate_objcCategoryDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcCategoryImplDecl"):
    return generate_objcCategoryImplDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcImplementationDecl"):
    return generate_objcImplementationDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcInterfaceDecl"):
    return generate_objcInterfaceDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcIvarDecl"):
    return generate_objcIvarDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcMethodDecl"):
    return generate_objcMethodDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcPropertyDecl"):
    return generate_objcPropertyDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("objcProtocolDecl"):
    return generate_objcProtocolDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("parmVarDecl"):
    return generate_parmVarDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("recordDecl"):
    return generate_recordDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("staticAssertDecl"):
    return generate_staticAssertDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("tagDecl"):
    return generate_tagDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("templateTemplateParmDecl"):
    return generate_templateTemplateParmDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("templateTypeParmDecl"):
    return generate_templateTypeParmDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("translationUnitDecl"):
    return generate_translationUnitDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("typeAliasDecl"):
    return generate_typeAliasDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("typeAliasTemplateDecl"):
    return generate_typeAliasTemplateDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("typedefDecl"):
    return generate_typedefDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("typedefNameDecl"):
    return generate_typedefNameDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("unresolvedUsingTypenameDecl"):
    return generate_unresolvedUsingTypenameDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("unresolvedUsingValueDecl"):
    return generate_unresolvedUsingValueDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("usingDecl"):
    return generate_usingDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("usingDirectiveDecl"):
    return generate_usingDirectiveDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("usingEnumDecl"):
    return generate_usingEnumDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("valueDecl"):
    return generate_valueDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("varDecl"):
    return generate_varDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("namedDecl"):
    return generate_namedDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("decl"):
    return generate_decl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("declaratorDecl"):
    return generate_declaratorDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("decompositionDecl"):
    return generate_decompositionDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("enumDecl"):
    return generate_enumDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("fieldDecl"):
    return generate_fieldDecl_Decl(RootAsMap->Children[0].second.get());
  case hashCString("friendDecl"):
    return generate_friendDecl_Decl(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionDecl>> parse_FunctionDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("parameterCountIs"):
    return generate_parameterCountIs_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("hasTrailingReturn"):
    return generate_hasTrailingReturn_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("hasOverloadedOperatorName"):
    return generate_hasOverloadedOperatorName_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("hasDynamicExceptionSpec"):
    return generate_hasDynamicExceptionSpec_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isConsteval"):
    return generate_isConsteval_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isConstexpr"):
    return generate_isConstexpr_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isDefaulted"):
    return generate_isDefaulted_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isDefinition"):
    return generate_isDefinition_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isDeleted"):
    return generate_isDeleted_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isExternC"):
    return generate_isExternC_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isInline"):
    return generate_isInline_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isMain"):
    return generate_isMain_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isNoReturn"):
    return generate_isNoReturn_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isNoThrow"):
    return generate_isNoThrow_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isStaticStorageClass"):
    return generate_isStaticStorageClass_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isVariadic"):
    return generate_isVariadic_FunctionDecl(RootAsMap->Children[0].second.get());
  case hashCString("isWeak"):
    return generate_isWeak_FunctionDecl(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LambdaCapture>> parse_LambdaCapture(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("lambdaCapture"):
    return generate_lambdaCapture_LambdaCapture(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NamedDecl>> parse_NamedDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("hasName"):
    return generate_hasName_NamedDecl(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifier>> parse_NestedNameSpecifier(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("nestedNameSpecifier"):
    return generate_nestedNameSpecifier_NestedNameSpecifier(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NestedNameSpecifierLoc>> parse_NestedNameSpecifierLoc(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("nestedNameSpecifierLoc"):
    return generate_nestedNameSpecifierLoc_NestedNameSpecifierLoc(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<OMPClause>> parse_OMPClause(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("ompDefaultClause"):
    return generate_ompDefaultClause_OMPClause(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<QualType>> parse_QualType(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("qualType"):
    return generate_qualType_QualType(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Stmt>> parse_Stmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  case hashCString("callExpr"):
    return generate_callExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("caseStmt"):
    return generate_caseStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("castExpr"):
    return generate_castExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("addrLabelExpr"):
    return generate_addrLabelExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("arrayInitIndexExpr"):
    return generate_arrayInitIndexExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("arrayInitLoopExpr"):
    return generate_arrayInitLoopExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("arraySubscriptExpr"):
    return generate_arraySubscriptExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("asmStmt"):
    return generate_asmStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("atomicExpr"):
    return generate_atomicExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("autoreleasePoolStmt"):
    return generate_autoreleasePoolStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("binaryConditionalOperator"):
    return generate_binaryConditionalOperator_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("binaryOperator"):
    return generate_binaryOperator_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("blockExpr"):
    return generate_blockExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("breakStmt"):
    return generate_breakStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cStyleCastExpr"):
    return generate_cStyleCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("characterLiteral"):
    return generate_characterLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("chooseExpr"):
    return generate_chooseExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("coawaitExpr"):
    return generate_coawaitExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("compoundLiteralExpr"):
    return generate_compoundLiteralExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("compoundStmt"):
    return generate_compoundStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("conditionalOperator"):
    return generate_conditionalOperator_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("constantExpr"):
    return generate_constantExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("continueStmt"):
    return generate_continueStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("coreturnStmt"):
    return generate_coreturnStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("coroutineBodyStmt"):
    return generate_coroutineBodyStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("coyieldExpr"):
    return generate_coyieldExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cudaKernelCallExpr"):
    return generate_cudaKernelCallExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxBindTemporaryExpr"):
    return generate_cxxBindTemporaryExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxBoolLiteral"):
    return generate_cxxBoolLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxCatchStmt"):
    return generate_cxxCatchStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxConstCastExpr"):
    return generate_cxxConstCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxConstructExpr"):
    return generate_cxxConstructExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxDefaultArgExpr"):
    return generate_cxxDefaultArgExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxDeleteExpr"):
    return generate_cxxDeleteExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxDependentScopeMemberExpr"):
    return generate_cxxDependentScopeMemberExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxDynamicCastExpr"):
    return generate_cxxDynamicCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxForRangeStmt"):
    return generate_cxxForRangeStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxFunctionalCastExpr"):
    return generate_cxxFunctionalCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxMemberCallExpr"):
    return generate_cxxMemberCallExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxNewExpr"):
    return generate_cxxNewExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxNoexceptExpr"):
    return generate_cxxNoexceptExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxNullPtrLiteralExpr"):
    return generate_cxxNullPtrLiteralExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxOperatorCallExpr"):
    return generate_cxxOperatorCallExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxReinterpretCastExpr"):
    return generate_cxxReinterpretCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxRewrittenBinaryOperator"):
    return generate_cxxRewrittenBinaryOperator_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxStaticCastExpr"):
    return generate_cxxStaticCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxStdInitializerListExpr"):
    return generate_cxxStdInitializerListExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxTemporaryObjectExpr"):
    return generate_cxxTemporaryObjectExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxThisExpr"):
    return generate_cxxThisExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxThrowExpr"):
    return generate_cxxThrowExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxTryStmt"):
    return generate_cxxTryStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("cxxUnresolvedConstructExpr"):
    return generate_cxxUnresolvedConstructExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("declRefExpr"):
    return generate_declRefExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("declStmt"):
    return generate_declStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("defaultStmt"):
    return generate_defaultStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("dependentCoawaitExpr"):
    return generate_dependentCoawaitExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("designatedInitExpr"):
    return generate_designatedInitExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("doStmt"):
    return generate_doStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("explicitCastExpr"):
    return generate_explicitCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("expr"):
    return generate_expr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("exprWithCleanups"):
    return generate_exprWithCleanups_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("fixedPointLiteral"):
    return generate_fixedPointLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("floatLiteral"):
    return generate_floatLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("forStmt"):
    return generate_forStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("genericSelectionExpr"):
    return generate_genericSelectionExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("gnuNullExpr"):
    return generate_gnuNullExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("gotoStmt"):
    return generate_gotoStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("ifStmt"):
    return generate_ifStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("imaginaryLiteral"):
    return generate_imaginaryLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("implicitCastExpr"):
    return generate_implicitCastExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("implicitValueInitExpr"):
    return generate_implicitValueInitExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("initListExpr"):
    return generate_initListExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("integerLiteral"):
    return generate_integerLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("labelStmt"):
    return generate_labelStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("lambdaExpr"):
    return generate_lambdaExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("materializeTemporaryExpr"):
    return generate_materializeTemporaryExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("memberExpr"):
    return generate_memberExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("nullStmt"):
    return generate_nullStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcCatchStmt"):
    return generate_objcCatchStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcFinallyStmt"):
    return generate_objcFinallyStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcIvarRefExpr"):
    return generate_objcIvarRefExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcMessageExpr"):
    return generate_objcMessageExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcStringLiteral"):
    return generate_objcStringLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcThrowStmt"):
    return generate_objcThrowStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("objcTryStmt"):
    return generate_objcTryStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("ompExecutableDirective"):
    return generate_ompExecutableDirective_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("opaqueValueExpr"):
    return generate_opaqueValueExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("parenExpr"):
    return generate_parenExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("parenListExpr"):
    return generate_parenListExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("predefinedExpr"):
    return generate_predefinedExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("returnStmt"):
    return generate_returnStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("stmtExpr"):
    return generate_stmtExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("substNonTypeTemplateParmExpr"):
    return generate_substNonTypeTemplateParmExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("switchCase"):
    return generate_switchCase_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("switchStmt"):
    return generate_switchStmt_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("unaryExprOrTypeTraitExpr"):
    return generate_unaryExprOrTypeTraitExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("unresolvedLookupExpr"):
    return generate_unresolvedLookupExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("unresolvedMemberExpr"):
    return generate_unresolvedMemberExpr_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("userDefinedLiteral"):
    return generate_userDefinedLiteral_Stmt(RootAsMap->Children[0].second.get());
  case hashCString("unaryOperator"):
    return generate_unaryOperator_Stmt(RootAsMap->Children[0].second.get());
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<AccessSpecDecl>> parse_AccessSpecDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<AddrLabelExpr>> parse_AddrLabelExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ArrayInitIndexExpr>> parse_ArrayInitIndexExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ArrayInitLoopExpr>> parse_ArrayInitLoopExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ArraySubscriptExpr>> parse_ArraySubscriptExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<AsmStmt>> parse_AsmStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<AtomicExpr>> parse_AtomicExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BinaryConditionalOperator>> parse_BinaryConditionalOperator(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BindingDecl>> parse_BindingDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BlockDecl>> parse_BlockDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BlockExpr>> parse_BlockExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<BreakStmt>> parse_BreakStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CStyleCastExpr>> parse_CStyleCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CUDAKernelCallExpr>> parse_CUDAKernelCallExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXBindTemporaryExpr>> parse_CXXBindTemporaryExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXBoolLiteralExpr>> parse_CXXBoolLiteralExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXCatchStmt>> parse_CXXCatchStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXConstCastExpr>> parse_CXXConstCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXConstructExpr>> parse_CXXConstructExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXConstructorDecl>> parse_CXXConstructorDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXConversionDecl>> parse_CXXConversionDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDeductionGuideDecl>> parse_CXXDeductionGuideDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDefaultArgExpr>> parse_CXXDefaultArgExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDeleteExpr>> parse_CXXDeleteExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDependentScopeMemberExpr>> parse_CXXDependentScopeMemberExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDestructorDecl>> parse_CXXDestructorDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXDynamicCastExpr>> parse_CXXDynamicCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXForRangeStmt>> parse_CXXForRangeStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXFunctionalCastExpr>> parse_CXXFunctionalCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXMemberCallExpr>> parse_CXXMemberCallExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXMethodDecl>> parse_CXXMethodDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXNewExpr>> parse_CXXNewExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXNoexceptExpr>> parse_CXXNoexceptExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXNullPtrLiteralExpr>> parse_CXXNullPtrLiteralExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXOperatorCallExpr>> parse_CXXOperatorCallExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXReinterpretCastExpr>> parse_CXXReinterpretCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXRewrittenBinaryOperator>> parse_CXXRewrittenBinaryOperator(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXStaticCastExpr>> parse_CXXStaticCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXStdInitializerListExpr>> parse_CXXStdInitializerListExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXTemporaryObjectExpr>> parse_CXXTemporaryObjectExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXThisExpr>> parse_CXXThisExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXThrowExpr>> parse_CXXThrowExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXTryStmt>> parse_CXXTryStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CXXUnresolvedConstructExpr>> parse_CXXUnresolvedConstructExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CastExpr>> parse_CastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CharacterLiteral>> parse_CharacterLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ChooseExpr>> parse_ChooseExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ClassTemplateDecl>> parse_ClassTemplateDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ClassTemplatePartialSpecializationDecl>> parse_ClassTemplatePartialSpecializationDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ClassTemplateSpecializationDecl>> parse_ClassTemplateSpecializationDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CoawaitExpr>> parse_CoawaitExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CompoundLiteralExpr>> parse_CompoundLiteralExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CompoundStmt>> parse_CompoundStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ConceptDecl>> parse_ConceptDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ConditionalOperator>> parse_ConditionalOperator(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ConstantExpr>> parse_ConstantExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ContinueStmt>> parse_ContinueStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CoreturnStmt>> parse_CoreturnStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CoroutineBodyStmt>> parse_CoroutineBodyStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<CoyieldExpr>> parse_CoyieldExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DeclRefExpr>> parse_DeclRefExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DeclStmt>> parse_DeclStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DeclaratorDecl>> parse_DeclaratorDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DecompositionDecl>> parse_DecompositionDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DefaultStmt>> parse_DefaultStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DependentCoawaitExpr>> parse_DependentCoawaitExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DesignatedInitExpr>> parse_DesignatedInitExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<DoStmt>> parse_DoStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<EnumDecl>> parse_EnumDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ExplicitCastExpr>> parse_ExplicitCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<Expr>> parse_Expr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ExprWithCleanups>> parse_ExprWithCleanups(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FieldDecl>> parse_FieldDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FixedPointLiteral>> parse_FixedPointLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FloatingLiteral>> parse_FloatingLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ForStmt>> parse_ForStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FriendDecl>> parse_FriendDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<FunctionTemplateDecl>> parse_FunctionTemplateDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<GNUNullExpr>> parse_GNUNullExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<GenericSelectionExpr>> parse_GenericSelectionExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<GotoStmt>> parse_GotoStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<IfStmt>> parse_IfStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ImaginaryLiteral>> parse_ImaginaryLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ImplicitCastExpr>> parse_ImplicitCastExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ImplicitValueInitExpr>> parse_ImplicitValueInitExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<IndirectFieldDecl>> parse_IndirectFieldDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<InitListExpr>> parse_InitListExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<IntegerLiteral>> parse_IntegerLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LabelDecl>> parse_LabelDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LabelStmt>> parse_LabelStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LambdaExpr>> parse_LambdaExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<LinkageSpecDecl>> parse_LinkageSpecDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<MaterializeTemporaryExpr>> parse_MaterializeTemporaryExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<MemberExpr>> parse_MemberExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NamespaceAliasDecl>> parse_NamespaceAliasDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NamespaceDecl>> parse_NamespaceDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NonTypeTemplateParmDecl>> parse_NonTypeTemplateParmDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<NullStmt>> parse_NullStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<OMPExecutableDirective>> parse_OMPExecutableDirective(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCAtCatchStmt>> parse_ObjCAtCatchStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCAtFinallyStmt>> parse_ObjCAtFinallyStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCAtThrowStmt>> parse_ObjCAtThrowStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCAtTryStmt>> parse_ObjCAtTryStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCAutoreleasePoolStmt>> parse_ObjCAutoreleasePoolStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCCategoryDecl>> parse_ObjCCategoryDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCCategoryImplDecl>> parse_ObjCCategoryImplDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCImplementationDecl>> parse_ObjCImplementationDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCInterfaceDecl>> parse_ObjCInterfaceDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCIvarDecl>> parse_ObjCIvarDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCIvarRefExpr>> parse_ObjCIvarRefExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCMessageExpr>> parse_ObjCMessageExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCMethodDecl>> parse_ObjCMethodDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCPropertyDecl>> parse_ObjCPropertyDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCProtocolDecl>> parse_ObjCProtocolDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ObjCStringLiteral>> parse_ObjCStringLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<OpaqueValueExpr>> parse_OpaqueValueExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ParenExpr>> parse_ParenExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ParenListExpr>> parse_ParenListExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ParmVarDecl>> parse_ParmVarDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<PredefinedExpr>> parse_PredefinedExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<RecordDecl>> parse_RecordDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ReturnStmt>> parse_ReturnStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<StaticAssertDecl>> parse_StaticAssertDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<StmtExpr>> parse_StmtExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<SubstNonTypeTemplateParmExpr>> parse_SubstNonTypeTemplateParmExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<SwitchCase>> parse_SwitchCase(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<SwitchStmt>> parse_SwitchStmt(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TagDecl>> parse_TagDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TemplateTemplateParmDecl>> parse_TemplateTemplateParmDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TemplateTypeParmDecl>> parse_TemplateTypeParmDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TranslationUnitDecl>> parse_TranslationUnitDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TypeAliasDecl>> parse_TypeAliasDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TypeAliasTemplateDecl>> parse_TypeAliasTemplateDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TypedefDecl>> parse_TypedefDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<TypedefNameDecl>> parse_TypedefNameDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnaryExprOrTypeTraitExpr>> parse_UnaryExprOrTypeTraitExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnaryOperator>> parse_UnaryOperator(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnresolvedLookupExpr>> parse_UnresolvedLookupExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnresolvedMemberExpr>> parse_UnresolvedMemberExpr(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnresolvedUsingTypenameDecl>> parse_UnresolvedUsingTypenameDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UnresolvedUsingValueDecl>> parse_UnresolvedUsingValueDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UserDefinedLiteral>> parse_UserDefinedLiteral(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UsingDecl>> parse_UsingDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UsingDirectiveDecl>> parse_UsingDirectiveDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<UsingEnumDecl>> parse_UsingEnumDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<ValueDecl>> parse_ValueDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

std::optional<clang::ast_matchers::internal::Matcher<VarDecl>> parse_VarDecl(BaseCRNode* Root) {
  MapCRNode* RootAsMap = dyn_cast<MapCRNode>(Root);
  if (!RootAsMap) {
    LOG_DEBUG("Invalid configuration, expected map");
    return {};
  }

  if (RootAsMap->Children.size() != 1) {
    LOG_DEBUG("Invalid configuration, expected 1 element");
    return {};
  }

  auto& MatcherName = RootAsMap->Children[0].first;
  LOG_DEBUG("Handling matcher with name: " << MatcherName);

  switch(hashCString(MatcherName.c_str())) {
  default:
    LOG_DEBUG("Unknown matcher: " << MatcherName);
    return {};
  }
}

}
